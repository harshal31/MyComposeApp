package udc.lenovo.com.udclient.service.telemetry.sync

import android.content.ContentValues
import android.content.Context
import com.google.gson.Gson
import io.mockk.*
import io.mockk.impl.annotations.MockK
import org.junit.After
import org.junit.Before
import org.junit.Test
import retrofit2.Call
import udc.lenovo.com.udclient.service.initialize.CoreApi
import udc.lenovo.com.udclient.service.shared.constants.Constants.*
import udc.lenovo.com.udclient.service.shared.db.DBHelper
import udc.lenovo.com.udclient.service.shared.db.DatabaseHandler
import udc.lenovo.com.udclient.service.shared.db.LcpSyncDatabaseHandler
import udc.lenovo.com.udclient.service.shared.db.LudpSyncDatabaseHandler
import udc.lenovo.com.udclient.service.shared.utils.NetworkUtilsLegacy
import udc.lenovo.com.udclient.service.shared.utils.UDCEncryptedStorage
import udc.lenovo.com.udclient.service.telemetry.DeviceContextEventCreationHelper
import udc.lenovo.com.udclient.service.telemetry.pojos.DatasetContext
import udc.lenovo.com.udclient.service.telemetry.pojos.EventsData
import udc.lenovo.com.udclient.service.telemetry.pojos.EventsSyncFrequencyInfo
import udc.lenovo.com.udclient.service.telemetry.pojos.UDCLoggingContextAndEvent
import udc.lenovo.com.udclient.service.telemetry.pojos.db.DataItem
import udc.lenovo.com.udclient.service.telemetry.pojos.lcp.DatasetContextRequestBody
import udc.lenovo.com.udclient.service.telemetry.sync.lcp.LcpSync
import udc.lenovo.com.udclient.service.telemetry.sync.lcp.TelemetryCallback
import udc.lenovo.com.udclient.service.telemetry.sync.ludp.LudpApiInterface
import udc.lenovo.com.udclient.service.telemetry.sync.ludp.LudpSync
import udc.lenovo.com.udclient.service.telemetry.sync.ludp.LudpSyncCallback
import udc.lenovo.com.udclient.utils.createDeviceContext
import java.sql.Date
import java.util.*

class DatasetContextSyncTest {
    @MockK
    lateinit var mockContext: Context

    @MockK
    lateinit var mockLUDPApiInterface: LudpApiInterface

    @MockK
    lateinit var mockLudpCall: Call<Void>

    private val datasetName = "datasetName"

    @Before
    fun setup() {
        MockKAnnotations.init(this)
        mockkObject(DatabaseHandler)
        mockkObject(LcpSyncDatabaseHandler)
        mockkObject(LudpSyncDatabaseHandler)
        mockkStatic(NetworkUtilsLegacy::class)
        mockkObject(LcpSync)
        mockkObject(LudpSync)
        mockkStatic(UDCEncryptedStorage::class)
        mockkObject(DeviceContextEventCreationHelper)
        mockkObject(CoreApi)

        every { LudpSync.getApiInterface(mockContext) } returns mockLUDPApiInterface
        every { mockLUDPApiInterface.postData(any()) } returns mockLudpCall
        justRun { DatabaseHandler.deleteDatasetContextEntry(any(), any()) }
        every {
            DatabaseHandler.insert(
                eq(mockContext),
                ofType(UDCLoggingContextAndEvent::class)
            )
        } returns -1
        justRun {
            LcpSyncDatabaseHandler.updateEventSyncStatus(
                mockContext,
                ofType(Int::class),
                ofType(Long::class),
                ofType(UDCLoggingContextAndEvent::class)
            )
        }
        justRun {
            DatabaseHandler.updateEvent(
                mockContext,
                ofType(Int::class),
                ofType(Long::class),
                ofType(ContentValues::class)
            )
        }
    }

    @Test
    fun test_syncUnsyncedEvents_shouldNotSyncDatasetContextIfListIsEmpty() {
        val emptyList = listOf<DataItem>()
        val datasetName = "sampleDatasetName"
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            EventsSyncFrequencyInfo()
        )
        every {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns emptyList
        every {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns emptyList

        DatasetContextSync.syncUnsyncedOrFailedInternalEvents(mockContext, datasetName)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 0) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                emptyList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedEvents_shouldNotSyncDatasetContextIfFilteredListIsEmpty() {
        val datasetName = "sampleDatasetName"
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        syncFrequencyInfo.eventName = "sampleEventName"
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val dataItemList = listOf(DataItem())
        every {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns dataItemList
        every {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns dataItemList

        DatasetContextSync.syncUnsyncedOrFailedInternalEvents(mockContext, datasetName)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 0) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedEvents_shouldNotSyncDatasetContextIfNetworkNotConnected() {
        val datasetName = "sampleDatasetName"
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        val eventName = "sampleEventName"
        syncFrequencyInfo.eventName = eventName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val dataItem =
            DataItem()
        dataItem.eventName = eventName
        val listForLcp = listOf(dataItem)
        every {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns listForLcp
        val listForLudp = listOf(dataItem)
        every {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns listForLudp
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns false
        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listForLcp,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listForLudp,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                listForLudp,
                NETWORK_SYNC_FAILED_VALUE
            )
        }

        DatasetContextSync.syncUnsyncedOrFailedInternalEvents(mockContext, datasetName)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listForLcp,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listForLudp,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedEvents_shouldNotSyncDatasetContextToLcpIfDatasetContextIsNull() {
        val emptyList = listOf<DataItem>()
        val datasetName = "sampleDatasetName"
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        val eventName = "sampleEventName"
        syncFrequencyInfo.eventName = eventName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val dataItem =
            DataItem()
        dataItem.eventName = eventName
        val dataItems = listOf(dataItem)
        every {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns dataItems
        every {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns dataItems
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true

        DatasetContextSync.syncUnsyncedOrFailedInternalEvents(mockContext, datasetName)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                emptyList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedEvents_shouldNotSyncDatasetContextToLcpIfDeviceIdIsEmpty() {
        val emptyList = listOf<DataItem>()
        val datasetName = "sampleDatasetName"
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        val eventName = "sampleEventName"
        syncFrequencyInfo.eventName = eventName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val dataItem =
            DataItem()
        dataItem.eventName = eventName
        val datasetContext =
            DatasetContext()
        datasetContext.deviceId = ""
        dataItem.data = Gson().toJson(datasetContext)
        val dataItems = listOf(dataItem)
        every {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns dataItems
        every {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns dataItems
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        justRun {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }

        DatasetContextSync.syncUnsyncedOrFailedInternalEvents(mockContext, datasetName)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                emptyList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedEvents_shouldSyncDatasetContextToLcp() {
        val emptyList = listOf<DataItem>()
        val datasetName = "sampleDatasetName"
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        val eventName = "sampleEventName"
        syncFrequencyInfo.eventName = eventName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val dataItem =
            DataItem()
        dataItem.eventName = eventName
        val datasetContext =
            DatasetContext()
        datasetContext.deviceId = "deviceId"
        dataItem.data = Gson().toJson(datasetContext)
        val dataItems = listOf(dataItem)
        every {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns dataItems
        every {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns dataItems
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }

        DatasetContextSync.syncUnsyncedOrFailedInternalEvents(mockContext, datasetName)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                emptyList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 1) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedEvents_shouldSyncDatasetContextToLudp() {
        val datasetName = "sampleDatasetName"
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        val eventName = "sampleEventName"
        syncFrequencyInfo.eventName = eventName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val dataItem =
            DataItem()
        dataItem.eventName = eventName
        val listOfDataItems = listOf(dataItem)
        every {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns listOf()
        every {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        } returns listOfDataItems
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listOfDataItems,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listOfDataItems,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                listOfDataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        every { DeviceContextEventCreationHelper.getDeviceContext(mockContext) } returns createDeviceContext(
            "deviceId"
        )

        DatasetContextSync.syncUnsyncedOrFailedInternalEvents(mockContext, datasetName)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedOrFailedInternalDatasetContextRecords(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listOfDataItems,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listOfDataItems,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 1) { mockLudpCall.enqueue(ofType()) }
    }

    @Test
    fun test_syncNrtEvent_shouldNotSyncDatasetContextIfNoNetwork() {
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns false
        val itemEvent = createDatasetContext("deviceId")
        every { DatabaseHandler.insert(mockContext, itemEvent) } returns 2
        DatasetContextSync.syncNrtEvent(mockContext, itemEvent)

        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.insert(
                eq(mockContext),
                ofType(UDCLoggingContextAndEvent::class)
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                eq(mockContext),
                ofType(String::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncNrtEvent_shouldRetryDbInsertIfFailedAndNetworkDisconnected() {
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns false
        val itemEvent = createDatasetContext("deviceId")

        DatasetContextSync.syncNrtEvent(mockContext, itemEvent)

        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 2) {
            DatabaseHandler.insert(
                eq(mockContext),
                ofType(UDCLoggingContextAndEvent::class)
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                eq(mockContext),
                ofType(String::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncNrtEvent_shouldNotSyncDatasetContextIfSyncInfoIsNull() {
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        val itemEvent = createDatasetContext("deviceId")
        every { CoreApi.getDeviceId(mockContext!!) } returns "deviceId"
        every {
            DatabaseHandler.getEventRecordBasedOnEventName(mockContext, datasetName)
        } returns null

        DatasetContextSync.syncNrtEvent(mockContext, itemEvent)

        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.insert(
                eq(mockContext),
                ofType(UDCLoggingContextAndEvent::class)
            )
        }
        verify(exactly = 1) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncNrtEvent_shouldNotSyncDatasetContextIfSyncEpsIsNull() {
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        val itemEvent = createDatasetContext("deviceId")
        every { CoreApi.getDeviceId(mockContext!!) } returns "deviceId"
        every {
            DatabaseHandler.getEventRecordBasedOnEventName(mockContext, datasetName)
        } returns EventsSyncFrequencyInfo()

        DatasetContextSync.syncNrtEvent(mockContext, itemEvent)

        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.insert(
                eq(mockContext),
                ofType(UDCLoggingContextAndEvent::class)
            )
        }
        verify(exactly = 1) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncNrtEvent_shouldNotSyncDatasetContextIfNotInSyncEps() {
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        val itemEvent = createDatasetContext("deviceId")
        every { CoreApi.getDeviceId(mockContext!!) } returns "deviceId"
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo()
        eventsSyncFrequencyInfo.syncEPs = "Random"
        every {
            DatabaseHandler.getEventRecordBasedOnEventName(mockContext, datasetName)
        } returns eventsSyncFrequencyInfo

        DatasetContextSync.syncNrtEvent(mockContext, itemEvent)

        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.insert(
                eq(mockContext),
                ofType(UDCLoggingContextAndEvent::class)
            )
        }
        verify(exactly = 1) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncNrtEvent_shouldNotSyncDatasetContextToLcpIfDeviceNotRegistered() {
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        val itemEvent = createDatasetContext("deviceId")
        every { CoreApi.getDeviceId(mockContext!!) } returns "deviceId"
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo()
        eventsSyncFrequencyInfo.syncEPs = LCP
        every {
            DatabaseHandler.getEventRecordBasedOnEventName(mockContext, datasetName)
        } returns eventsSyncFrequencyInfo
        every { LcpSync.isRegistrationSuccess(mockContext) } returns false

        DatasetContextSync.syncNrtEvent(mockContext, itemEvent)

        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.insert(
                eq(mockContext),
                ofType(UDCLoggingContextAndEvent::class)
            )
        }
        verify(exactly = 1) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 1) { LcpSync.isRegistrationSuccess(mockContext) }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncNrtEvent_shouldSyncDatasetContextToLcp() {
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        val itemEvent = createDatasetContext("deviceId")
        every { CoreApi.getDeviceId(mockContext!!) } returns "deviceId"
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo()
        eventsSyncFrequencyInfo.syncEPs = LCP
        every {
            DatabaseHandler.getEventRecordBasedOnEventName(mockContext, datasetName)
        } returns eventsSyncFrequencyInfo
        every { LcpSync.isRegistrationSuccess(mockContext) } returns true
        justRun {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }

        // invocation
        DatasetContextSync.syncNrtEvent(mockContext, itemEvent)

        // assertion
        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.insert(
                eq(mockContext),
                ofType(UDCLoggingContextAndEvent::class)
            )
        }
        verify(exactly = 1) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 1) { LcpSync.isRegistrationSuccess(mockContext) }
        verify(exactly = 1) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncNrtEvent_shouldSyncDatasetContextToLudp() {
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        val itemEvent = createDatasetContext("deviceId")
        every { CoreApi.getDeviceId(mockContext!!) } returns "deviceId"
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo()
        eventsSyncFrequencyInfo.syncEPs = LUDP
        every {
            DatabaseHandler.getEventRecordBasedOnEventName(mockContext, datasetName)
        } returns eventsSyncFrequencyInfo
        every { DeviceContextEventCreationHelper.getDeviceContext(mockContext) } returns createDeviceContext(
            "deviceId"
        )
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        every {
            DatabaseHandler.insert(mockContext, itemEvent)
        } returns 1
        justRun { mockLudpCall.enqueue(any()) }

        DatasetContextSync.syncNrtEvent(mockContext, itemEvent)

        verify(exactly = 1)
        { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1)
        {
            DatabaseHandler.insert(
                eq(mockContext),
                ofType(UDCLoggingContextAndEvent::class)
            )
        }
        verify(exactly = 1)
        {
            DatabaseHandler.getEventRecordBasedOnEventName(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 1) { mockLudpCall.enqueue(ofType()) }
    }

    @Test
    fun test_syncFailedInternalEvents_shouldNotSyncDatasetContextIfNoNetwork() {
        val dataItemList = listOf(DataItem())
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns
                listOf(syncFrequencyInfo)
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns false
        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE)
        }
        every {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns dataItemList
        every {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns dataItemList

        DatasetContextSync.syncFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) { DatabaseHandler.getAllEventSyncRecords(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
        verify(exactly = 0) {
            mockLudpCall.enqueue(any())
        }
    }

    @Test
    fun test_syncFailedInternalEvents_shouldNotSyncDatasetContextIfNoEventsSyncFrequencyInfos() {
        val dataItemList = listOf(DataItem())
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf()
        every {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns dataItemList
        every {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns dataItemList

        DatasetContextSync.syncFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 0) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) { DatabaseHandler.getAllEventSyncRecords(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncFailedInternalEvents_shouldNotSyncDatasetContextToLcpIfDataIsNotDatasetContext() {
        val dataItem = DataItem()
        dataItem.data = "RandomData"
        val dataItemList = listOf(dataItem)
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = LCP
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns
                listOf(syncFrequencyInfo)
        every {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns dataItemList
        every {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns listOf()
        justRun {
            DatabaseHandler.updateEvent(
                mockContext,
                DatasetContextSync.tableId,
                dataItem.id.toLong(),
                ofType(ContentValues::class)
            )
        }
        // invocation
        DatasetContextSync.syncFailedInternalEvents(mockContext)

        // assertion
        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.updateEvent(
                mockContext,
                DatasetContextSync.tableId,
                dataItem.id.toLong(),
                ofType(ContentValues::class)
            )
        }
        verify(exactly = 1) { DatabaseHandler.getAllEventSyncRecords(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncFailedInternalEvents_shouldNotSyncDatasetContextToLcpIfDeviceIdIsEmpty() {
        val dataItem = DataItem()
        val datasetContext = DatasetContext()
        datasetContext.deviceId = ""
        dataItem.data = Gson().toJson(datasetContext)
        val dataItemId = 1
        dataItem.id = dataItemId
        val dataItemList = listOf(dataItem)
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = LCP
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns
                listOf(syncFrequencyInfo)

        every {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns dataItemList
        every {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns listOf()

        DatasetContextSync.syncFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) { DatabaseHandler.getAllEventSyncRecords(mockContext) }
        verify(exactly = 1) { DatabaseHandler.deleteDatasetContextEntry(mockContext, dataItemId) }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncFailedInternalEvents_shouldSyncDatasetContextToLcp() {
        val dataItem = DataItem()
        val datasetContext = DatasetContext()
        datasetContext.deviceId = "deviceId"
        dataItem.data = Gson().toJson(datasetContext)
        val dataItemList = listOf(dataItem)
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = LCP
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns
                listOf(syncFrequencyInfo)

        every {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns dataItemList
        every {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns listOf()

        // invocation
        DatasetContextSync.syncFailedInternalEvents(mockContext)

        // assertions
        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) { DatabaseHandler.getAllEventSyncRecords(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 1) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncFailedInternalEvents_shouldNotSyncDatasetContextToLcpIfSyncEpsDoesntContainLcp() {
        val dataItem =
            DataItem()
        val datasetContext =
            DatasetContext()
        val syncInfo = EventsSyncFrequencyInfo()
        syncInfo.syncEPs = LUDP
        syncInfo.eventName = "UDCEvent"
        val syncInfos = listOf(syncInfo)
        datasetContext.deviceId = "deviceId"
        dataItem.data = Gson().toJson(datasetContext)
        dataItem.eventName = "UDCEvent"
        val dataItemList = listOf(dataItem)
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns syncInfos
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        every {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns listOf()
        every {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns dataItemList

        DatasetContextSync.syncFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) { DatabaseHandler.getAllEventSyncRecords(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncFailedInternalEvents_shouldSyncDatasetContextToLudpIfSyncEpsContainLudp() {
        val dataItem =
            DataItem()
        val syncInfo = EventsSyncFrequencyInfo()
        syncInfo.syncEPs = LUDP
        syncInfo.eventName = "UDCEvent"
        val datasetContext = createDatasetContext("deviceId")
        val deviceContext = createDeviceContext(datasetContext.deviceId)
        val syncInfos = listOf(syncInfo)
        dataItem.data = Gson().toJson(datasetContext)
        dataItem.eventName = "UDCEvent"
        val dataItemList = listOf(dataItem)
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns syncInfos
        every {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns listOf()
        every {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        } returns dataItemList
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        every { DeviceContextEventCreationHelper.getDeviceContext(ofType()) } returns deviceContext
        justRun { mockLudpCall.enqueue(ofType(LudpSyncCallback::class)) }

        DatasetContextSync.syncFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getInternalDatasetContextRecordsBasedOnPendingStatus(
                mockContext,
                NETWORK_SYNC_FAILED_VALUE,
                SERVER_RESPONSE_FAILED_VALUE
            )
        }
        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) { DatabaseHandler.getAllEventSyncRecords(mockContext) }
        verify(exactly = 1) { LudpSync.getApiInterface(mockContext) }
        verify(exactly = 1) { mockLUDPApiInterface.postData(ofType()) }
        verify(exactly = 1) { mockLudpCall.enqueue(ofType()) }
        verify { listOf(mockContext) wasNot Called }
    }

    @Test
    fun test_syncExternalEvents_shouldNotSyncLcpDatasetContextIfNoNetwork() {
        val dataItem = DataItem().apply {
            eventName = datasetName
        }
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo().apply {
            eventName = datasetName
            syncEPs = LCP
        }
        val dataItemList = listOf(dataItem)
        val eventSyncFreqInfoList = listOf(eventsSyncFrequencyInfo)

        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID
            )
        }
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns false
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns eventSyncFreqInfoList
        every {
            LcpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItemList

        every {
            LudpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItemList

        DatasetContextSync.syncExternalEvents(mockContext, datasetName)

        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 0) { LcpSync.isRegistrationSuccess(mockContext) }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncExternalEvents_shouldNotSyncLudpDatasetContextIfNoNetwork() {
        val dataItem = DataItem().apply {
            eventName = datasetName
        }
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo().apply {
            eventName = datasetName
            syncEPs = LUDP
        }
        val dataItemList = listOf(dataItem)
        val eventSyncFreqInfoList = listOf(eventsSyncFrequencyInfo)

        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns false
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns eventSyncFreqInfoList
        every {
            LcpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItemList

        every {
            LudpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItemList

        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }

        DatasetContextSync.syncExternalEvents(mockContext, datasetName)

        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 0) { LcpSync.isRegistrationSuccess(mockContext) }
        verify(exactly = 0) {
            mockLudpCall.enqueue(any())
        }
    }

    @Test
    fun test_syncExternalEvents_shouldNotSyncDatasetIfItemListIsEmpty() {
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo()
        val dataItemList = emptyList<DataItem>()
        val eventSyncFreqInfoList = listOf(eventsSyncFrequencyInfo)

        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns false
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns eventSyncFreqInfoList
        every {
            LcpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItemList
        every {
            LudpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItemList

        DatasetContextSync.syncExternalEvents(mockContext, datasetName)

        verify(exactly = 0) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.getEventRecordBasedOnEventName(mockContext, datasetName)
        }
        verify(exactly = 0) { LcpSync.isRegistrationSuccess(mockContext) }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(EventsData::class), "events-data", ofType(TelemetryCallback::class))
        }
        verify(exactly = 0) {
            mockLudpCall.enqueue(any())
        }
    }

    @Test
    fun test_syncExternalEvents_shouldSyncLudpDatasetWhenNetworkConnected() {
        val datasetContext = createDatasetContext("deviceId")
        val dataItem = DataItem().apply {
            eventName = datasetName
            data = Gson().toJson(datasetContext)

        }
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo().apply {
            eventName = datasetName
            syncEPs = LUDP
        }
        val deviceContext = createDeviceContext(datasetContext.deviceId)
        val dataItemList = listOf(dataItem)
        val eventSyncFreqInfoList = listOf(eventsSyncFrequencyInfo)

        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns eventSyncFreqInfoList
        every {
            LcpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns emptyList()

        every {
            LudpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItemList

        every { DeviceContextEventCreationHelper.getDeviceContext(mockContext) } returns deviceContext

        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        justRun { mockLudpCall.enqueue(any()) }

        DatasetContextSync.syncExternalEvents(mockContext, datasetName)

        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.getEventRecordBasedOnEventName(mockContext, datasetName)
        }
        verify(exactly = 0) { LcpSync.isRegistrationSuccess(mockContext) }
        verify(exactly = 1) {
            mockLudpCall.enqueue(any())
        }
    }

    @Test
    fun test_syncExternalEvents_shouldSyncDatasetContextToLcp() {
        val emptyList = listOf<DataItem>()
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        syncFrequencyInfo.eventName = datasetName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val dataItem = DataItem()
        dataItem.eventName = datasetName
        val datasetContext = DatasetContext()
        datasetContext.deviceId = "deviceId"
        dataItem.data = Gson().toJson(datasetContext)
        val dataItems = listOf(dataItem)

        every { CoreApi.isDeviceRegistered(mockContext) } returns true
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        every {
            LcpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItems

        every {
            LudpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns emptyList

        // invocation
        DatasetContextSync.syncExternalEvents(mockContext, datasetName)

        // assertion
        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                emptyList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 1) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncExternalEvents_shouldSyncLudpButNotLcpIfDeviceIsNotRegistered() {
        val dataItem = DataItem().apply {
            eventName = datasetName
        }
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo().apply {
            eventName = datasetName
            syncEPs = "${LCP},${LUDP}"
        }

        val dataItemList = listOf(dataItem)
        val eventSyncFreqInfoList = listOf(eventsSyncFrequencyInfo)

        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        every { CoreApi.isDeviceRegistered(mockContext) } returns false
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns eventSyncFreqInfoList
        every {
            LcpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItemList

        every {
            LudpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItemList

        every {
            DeviceContextEventCreationHelper.getDeviceContext(mockContext)
        } returns createDeviceContext("deviceId")

        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID
            )
        }
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        justRun { mockLudpCall.enqueue(any()) }

        DatasetContextSync.syncExternalEvents(mockContext, datasetName)

        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) { CoreApi.isDeviceRegistered(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID
            )
        }
        verify(exactly = 0) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
        verify(exactly = 1) { mockLudpCall.enqueue(any()) }
    }

    @Test
    fun test_syncNrtExternalEvents_shouldNotSyncDatasetListIsEmpty() {
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo()
        val dataItemList = emptyList<DataItem>()
        val eventSyncFreqInfoList = listOf(eventsSyncFrequencyInfo)

        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns false
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns eventSyncFreqInfoList
        every {
            LcpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItemList
        every {
            LudpSyncDatabaseHandler.getExternalDatasetRecords(mockContext, datasetName)
        } returns dataItemList

        DatasetContextSync.syncNrtExternalEvents(mockContext, dataItemList)

        verify(exactly = 0) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.getEventRecordBasedOnEventName(mockContext, datasetName)
        }
        verify(exactly = 0) { LcpSync.isRegistrationSuccess(mockContext) }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(EventsData::class), "events-data", ofType(TelemetryCallback::class))
        }
        verify(exactly = 0) {
            mockLudpCall.enqueue(any())
        }
    }

    @Test
    fun test_syncNrtExternalEvents_shouldNotSyncLcpAndLudpDatasetContextIfNoNetwork() {
        val dataItem = DataItem().apply {
            eventName = datasetName
        }
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo().apply {
            eventName = datasetName
            syncEPs = "$LCP,$LUDP"
        }
        val dataItemList = listOf(dataItem)
        val eventSyncFreqInfoList = listOf(eventsSyncFrequencyInfo)

        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID
            )
        }
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns false
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns eventSyncFreqInfoList

        DatasetContextSync.syncNrtExternalEvents(mockContext, dataItemList)

        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) { LcpSync.isRegistrationSuccess(mockContext) }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
        verify(exactly = 0) {  mockLudpCall.enqueue(any()) }
    }

    @Test
    fun test_syncNrtExternalEvents_shouldSyncDatasetContextToLcpAndLudp() {
        val emptyList = listOf<DataItem>()
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        syncFrequencyInfo.eventName = datasetName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val deviceContext = createDeviceContext("deviceId")
        val dataItem = DataItem()
        dataItem.eventName = datasetName
        val datasetContext = createDatasetContext("deviceId")
        datasetContext.deviceId = "deviceId"
        dataItem.data = Gson().toJson(datasetContext)
        val dataItems = listOf(dataItem)

        every { CoreApi.isDeviceRegistered(mockContext) } returns true
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        every { DeviceContextEventCreationHelper.getDeviceContext(mockContext) } returns deviceContext

        justRun { mockLudpCall.enqueue(any()) }

        // invocation
        DatasetContextSync.syncNrtExternalEvents(mockContext, dataItems)

        // assertion
        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                emptyList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 1) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
        verify(exactly = 1) { mockLudpCall.enqueue(any()) }
    }

    @Test
    fun test_syncNrtExternalEvents_shouldSyncLudpButNotLcpIfDeviceIsNotRegistered() {
        val dataItem = DataItem().apply {
            eventName = datasetName
        }
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo().apply {
            eventName = datasetName
            syncEPs = "${LCP},${LUDP}"
        }

        val dataItemList = listOf(dataItem)
        val eventSyncFreqInfoList = listOf(eventsSyncFrequencyInfo)

        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        every { CoreApi.isDeviceRegistered(mockContext) } returns false
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns eventSyncFreqInfoList

        every {
            DeviceContextEventCreationHelper.getDeviceContext(mockContext)
        } returns createDeviceContext("deviceId")

        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID
            )
        }
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        justRun { mockLudpCall.enqueue(any()) }

        DatasetContextSync.syncNrtExternalEvents(mockContext, dataItemList)

        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) { CoreApi.isDeviceRegistered(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID
            )
        }
        verify(exactly = 0) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_EXTERNAL_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                mockContext,
                datasetName
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
        verify(exactly = 1) { mockLudpCall.enqueue(any()) }
    }

    @Test
    fun test_syncUnsyncedButNotFailedInternalEvents_shouldNotSyncDatasetContextIfListIsEmpty() {
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        val emptyList = listOf<DataItem>()
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            EventsSyncFrequencyInfo()
        )
        every {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        } returns emptyList
        every {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        } returns emptyList

        DatasetContextSync.syncUnsyncedButNotFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        }
        verify(exactly = 0) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                emptyList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 0) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                emptyList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedButNotFailedInternalEvents_shouldNotSyncDatasetContextIfFilteredListIsEmpty() {
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        syncFrequencyInfo.eventName = "sampleEventName"
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        val dataItemList = listOf(DataItem())
        every {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        } returns dataItemList
        every {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        } returns dataItemList

        DatasetContextSync.syncUnsyncedButNotFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        }
        verify(exactly = 0) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 0) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItemList,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedButNotFailedInternalEvents_shouldNotSyncDatasetContextIfNetworkNotConnected() {
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        val eventName = "sampleEventName"
        syncFrequencyInfo.eventName = eventName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val dataItem =
            DataItem()
        dataItem.eventName = eventName
        val listForLcp = listOf(dataItem)
        every {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        } returns listForLcp
        val listForLudp = listOf(dataItem)
        every {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        } returns listForLudp
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns false
        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listForLcp,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listForLudp,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                listForLudp,
                NETWORK_SYNC_FAILED_VALUE
            )
        }

        DatasetContextSync.syncUnsyncedButNotFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        }
        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listOf(dataItem),
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                listForLudp,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedButNotFailedInternalEvents_shouldNotSyncDatasetContextToLcpIfDatasetContextIsNull() {
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        val eventName = "sampleEventName"
        syncFrequencyInfo.eventName = eventName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val dataItem =
            DataItem()
        dataItem.eventName = eventName
        val dataItems = listOf(dataItem)
        every {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        } returns dataItems
        every {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        } returns dataItems
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }

        DatasetContextSync.syncUnsyncedButNotFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        }
        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedButNotFailedInternalEvents_shouldNotSyncDatasetContextToLcpIfDeviceIdIsEmpty() {
        val emptyList = listOf<DataItem>()
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        val eventName = "sampleEventName"
        syncFrequencyInfo.eventName = eventName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val dataItem = DataItem()
        dataItem.eventName = eventName
        val datasetContext =
            DatasetContext()
        datasetContext.deviceId = ""
        dataItem.data = Gson().toJson(datasetContext)
        val dataItems = listOf(dataItem)
        every {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        } returns dataItems
        every {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        } returns dataItems
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        justRun {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }

        DatasetContextSync.syncUnsyncedButNotFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        }
        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                emptyList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 1) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedButNotFailedInternalEvents_shouldSyncDatasetContextToLcp() {
        val emptyList = listOf<DataItem>()
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        val eventName = "sampleEventName"
        syncFrequencyInfo.eventName = eventName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo
        )
        val dataItem = DataItem()
        dataItem.eventName = eventName
        val datasetContext = DatasetContext()
        datasetContext.deviceId = "deviceId"
        dataItem.data = Gson().toJson(datasetContext)
        val dataItems = listOf(dataItem)
        every {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        } returns dataItems
        every {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        } returns dataItems
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }

        DatasetContextSync.syncUnsyncedButNotFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        }
        verify(exactly = 2) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                emptyList,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                dataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 1) {
            LcpSync.postRequest(mockContext, ofType(DatasetContextRequestBody::class), "dataset-context", ofType(TelemetryCallback::class))
        }
    }

    @Test
    fun test_syncUnsyncedButNotFailedInternalEvents_shouldSyncDatasetContextToLudp() {
        val syncFrequencyInfo = EventsSyncFrequencyInfo()
        syncFrequencyInfo.syncEPs = "LCP,LUDP"
        val eventName = "sampleEventName"
        syncFrequencyInfo.eventName = eventName
        val syncFreuencyInfoWithoutSyncEp = EventsSyncFrequencyInfo()
        syncFreuencyInfoWithoutSyncEp.eventName = eventName
        val syncFreuencyInfoWithInvalidSyncEp = EventsSyncFrequencyInfo()
        syncFreuencyInfoWithInvalidSyncEp.syncEPs = "Random"
        syncFreuencyInfoWithInvalidSyncEp.eventName = eventName
        every { DatabaseHandler.getAllEventSyncRecords(mockContext) } returns listOf(
            syncFrequencyInfo, syncFreuencyInfoWithoutSyncEp, syncFreuencyInfoWithInvalidSyncEp
        )
        val dataItem = DataItem()
        dataItem.eventName = eventName
        val listOfDataItems = listOf(dataItem)
        every {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        } returns listOf()
        every {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(mockContext)
        } returns listOfDataItems
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listOfDataItems,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        justRun {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listOfDataItems,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        justRun {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                listOfDataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        every { DeviceContextEventCreationHelper.getDeviceContext(mockContext) } returns createDeviceContext(
            "deviceId"
        )

        DatasetContextSync.syncUnsyncedButNotFailedInternalEvents(mockContext)

        verify(exactly = 1) {
            LcpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.getUnsyncedButNotFailedInternalDatasetContextRecords(
                mockContext
            )
        }
        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 0) {
            DatabaseHandler.updateFailedEventsStatus(
                mockContext,
                listOfDataItems,
                NETWORK_SYNC_FAILED_VALUE,
                DBHelper.DATASET_CONTEXT_TABLE_ID
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(mockContext, ofType(Int::class))
        }

        verify(exactly = 1) {
            LudpSyncDatabaseHandler.updateWithPendingStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                listOfDataItems,
                NETWORK_SYNC_FAILED_VALUE
            )
        }
        verify(exactly = 0) {
            DatabaseHandler.deleteDatasetContextEntry(
                mockContext,
                ofType(Int::class)
            )
        }
        verify(exactly = 1) { mockLudpCall.enqueue(ofType()) }
    }

    @Test
    fun test_createLudpEvents_shouldDeleteDatasetContextEntryIfDeviceIdIsEmpty() {
        val dataItem = DataItem()
        dataItem.data = Gson().toJson(createDatasetContext(""))
        val id = 1
        dataItem.id = id
        justRun { DatabaseHandler.deleteDatasetContextEntry(mockContext, id) }

        DatasetContextSync.createLudpEvents(mockContext, listOf(dataItem))

        verify(exactly = 1) { DatabaseHandler.deleteDatasetContextEntry(mockContext, id) }
    }

    @Test
    fun test_syncNrtEvent_shouldNotSyncDatasetContextToLUDPIfExceptionIsThrownWhileSyncing() {
        val itemEvent = createDatasetContext("deviceId")
        val eventsSyncFrequencyInfo = EventsSyncFrequencyInfo()
        eventsSyncFrequencyInfo.syncEPs = LUDP
        every { NetworkUtilsLegacy.isNetworkConnected(mockContext) } returns true
        every { DatabaseHandler.insert(mockContext, itemEvent) } returns 2
        every { CoreApi.getDeviceId(mockContext!!) } returns "deviceId"
        every {
            DatabaseHandler.getEventRecordBasedOnEventName(mockContext, datasetName)
        } returns eventsSyncFrequencyInfo
        every { mockLudpCall.enqueue(any()) } throws RuntimeException()
        justRun {
            LudpSyncDatabaseHandler.updateEventSyncStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                2,
                itemEvent
            )
        }

        DatasetContextSync.syncNrtEvent(mockContext, itemEvent)

        verify(exactly = 1) { NetworkUtilsLegacy.isNetworkConnected(mockContext) }
        verify(exactly = 1) {
            LudpSyncDatabaseHandler.updateEventSyncStatus(
                mockContext,
                DBHelper.DATASET_CONTEXT_TABLE_ID,
                2,
                itemEvent
            )
        }
        verify(exactly = 1) {
            DatabaseHandler.getEventRecordBasedOnEventName(
                eq(mockContext),
                ofType(String::class)
            )
        }
        verify(exactly = 0) {
            LcpSync.postRequest(
                mockContext,
                ofType(DatasetContextRequestBody::class),
                "dataset-context",
                ofType(TelemetryCallback::class)
            )
        }
    }

    private fun createDatasetContext(deviceId: String): DatasetContext {
        val datasetContext =
            DatasetContext()
        datasetContext.sourceComponent = "sourceComponent"
        datasetContext.source = "source"
        datasetContext.deviceId = deviceId
        datasetContext.deviceContextId = "deviceContextId"
        datasetContext.dataSetId = "dataSetId"
        datasetContext.dataSetContextId = "dataSetContextId"
        datasetContext.schemaVersion = "schemaVersion"
        datasetContext.dataSetType = "dataSetType"
        datasetContext.datasetName = datasetName
        datasetContext.setDatasetContextDatetime(Date(Calendar.getInstance().time.time))
        return datasetContext
    }

    @After
    fun tearDown() {
        clearAllMocks()
    }
}

